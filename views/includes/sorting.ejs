<script>

    const employees = <%- JSON.stringify(employees)%>;
    const select = document.getElementById('sort-select');
    console.log(select.name);

    function renderTable() {
      let existingTBody = document.querySelector('tbody');
      let existingTable = existingTBody.parentElement;
      const rows = document.querySelectorAll(".employee-row");
      const ids = [];
      rows.forEach(row => {
          if (row.style.display === '') {
              ids.push(row.id)
          }
      })

      console.log(ids);

      if (existingTable) {
          existingTable.remove();
      }

      let newTable = document.createElement('table');
      let thead = document.createElement('thead');
      let tbody = document.createElement('tbody');

      if (select.name !== 'campaign-details') {
        thead.innerHTML = `
          <tr>
              <th>Imię i nazwisko</th>
              <th>Stawka za godzinę</th>
              <th>Czy kierowca</th>
              <th>Godzin na dzień</th>
              <th>Edytuj</th>
              <th>Usuń</th>
          </tr>
      `;
      } else {
        thead.innerHTML = `
        <tr>
            <th>Imię i nazwisko</th>
            <th>Zarobione pieniędze</th>
            <th>Ilość dni w pracy</th>
            <th>Szczegóły pracownika</th>
        </tr>
      `;
      }

      newTable.appendChild(thead);

    //   employees = employees.filter(employee => {
    //     console.log(ids.includes(employee._id));
    //     return ids.includes(employee._id)
    //   })


      for (let employee of employees) {
        let row;
        if (select.name !== 'campaign-details') {
        if (!ids.includes(employee._id)) {
            row = `
              <tr class='employee-row' id=${employee._id} style='display:none'>
                  <td class='employee-full-name'>${employee.name} ${employee.surname}</td>
                  <td>${employee.hourlyRate}</td>
                  <td>${employee.isDriver === true ? 'Tak' : 'Nie'} ${employee.driverAmount ? `(${employee.driverAmount} zł)` : ''}</td>
                  <td>${employee.dailyHours}</td>
                  <td>
                      <a type="button" class="btn-employee" href="/edit-employee/${employee._id}">Edytuj</a>
                  </td>
                  <td>
                      <form action="/delete-employee/${employee._id}" method="POST">
                          <button type="submit" class="btn-employee">Usuń</button>
                      </form>
                  </td>
              </tr>
          `;
        }
        else {
         row = `
              <tr class='employee-row' id=${employee._id}>
                  <td class='employee-full-name'>${employee.name} ${employee.surname}</td>
                  <td>${employee.hourlyRate}</td>
                  <td>${employee.isDriver === true ? 'Tak' : 'Nie'} ${employee.driverAmount ? `(${employee.driverAmount} zł)` : ''}</td>
                  <td>${employee.dailyHours}</td>
                  <td>
                      <a type="button" class="btn-employee" href="/edit-employee/${employee._id}">Edytuj</a>
                  </td>
                  <td>
                      <form action="/delete-employee/${employee._id}" method="POST">
                          <button type="submit" class="btn-employee">Usuń</button>
                      </form>
                  </td>
              </tr>
          `;
            }
          tbody.innerHTML += row;
      }
    else {
        if (!ids.includes(employee._id)) {
            row = `
              <tr class='employee-row' id=${employee._id} style='display:none'>
                  <td class='employee-full-name'>${employee.name} ${employee.surname}</td>
                  <td>${employee.monthSalary}</td>
                  <td>${employee.workdays.daysNormal.length + employee.workdays.daysDelegation.length} (${employee.workdays.daysDelegation.length} w delegacji)</td>
                  <td>
                    <a type="button" class="btn-employee" href='/employee-details/${employee._id}'>Szczegóły pracownika</a>
                  </td>
              </tr>
          `;
        }
        else {
            row = `
            <tr class='employee-row' id=${employee._id}>
                  <td class='employee-full-name'>${employee.name} ${employee.surname}</td>
                  <td>${employee.monthSalary}</td>
                  <td>${employee.workdays.daysNormal.length + employee.workdays.daysDelegation.length} (${employee.workdays.daysDelegation.length} w delegacji)</td>
                  <td>
                    <a type="button" class="btn-employee" href='/employee-details/${employee._id}'>Szczegóły pracownika</a>
                  </td>
              </tr>
          `;
            }
          tbody.innerHTML += row;
      }
    }
      newTable.appendChild(tbody);

      let tableControl = document.querySelector('.table-control');
      tableControl.appendChild(newTable);
  }

    select.addEventListener('change', function() {
        const selectedOption = this.value;
        let sortedEmployes = [];
        console.log(selectedOption);

        switch(selectedOption) {
          case 'Alfabetycznie (rosnąco)':
              console.log('sortowanie rosnąco');
              employees.sort((a,b) => {
                  if (a.surname < b.surname) return -1
                  else if (a.surname > b.surname) return 1
                  else if (a.name < b.name) return -1
                  else if (a.name > b.name) return 1
                  return 0
                })
              break;
          case 'Alfabetycznie (malejąco)':
              employees.sort((a,b) => {
                  if (a.surname < b.surname) return 1
                  else if (a.surname > b.surname) return -1
                  else if (a.name < b.name) return 1
                  else if (a.name > b.name) return -1
                  return 0
                })
              break;
          case 'Wg stawki (rosnąco)':
              employees.sort((a,b) => {
                  return a.hourlyRate - b.hourlyRate;
              })
              break;

          case 'Wg stawki (malejąco)':
              employees.sort((a,b) => {
                  return b.hourlyRate - a.hourlyRate;
              })
              break;

          case 'Wg zarobionych pieniędzy (rosnąco)':
              employees.sort((a,b) => {
                  return a.monthSalary - b.monthSalary;
              })
              break;

          case 'Wg zarobionych pieniędzy (malejąco)':
              employees.sort((a,b) => {
                  return b.monthSalary - a.monthSalary;
              })
              break;
        }

        renderTable();
    })
</script>
